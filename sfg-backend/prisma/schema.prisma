generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  userId    String    @id @default(uuid())
  email     String    @unique
  role      UserRole  @default(USER)
  profile   Profile?
  passwords Password[]
  tokens    Token[]
  createdLeagues  League[]
  leagueMembers LeagueMember[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Profile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  userName  String   @unique
  firstName String
  lastName  String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  hash      String
  seq       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, seq])
}

model Token {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  token     String   @unique
  seq       Int
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([userId, seq])
  @@index([userId])
}

model Season {
  seasonId  Int   @id
  filmingLocation String?
  airStartDate DateTime?
  airEndDate DateTime?
  leagues League[]
}

model League {
  leagueId   String   @id @default(uuid())
  leagueName String
  season     Season   @relation(fields: [seasonId], references: [seasonId], onDelete: Restrict, onUpdate: Cascade)
  seasonId   Int
  createdBy  User     @relation(fields: [createdById], references: [userId], onDelete: Restrict, onUpdate: Cascade)
  createdById String
  members     LeagueMember[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([seasonId])
  @@index([createdById])
}

enum LeagueMemberRole {
  OWNER
  ADMIN
  MEMBER
}

model LeagueMember {
  id        String            @id @default(uuid())
  league    League            @relation(fields: [leagueId], references: [leagueId], onDelete: Cascade, onUpdate: Cascade)
  leagueId  String
  user   User           @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  userId String
  role      LeagueMemberRole  @default(MEMBER)
  joinedAt  DateTime          @default(now())

  @@unique([leagueId, userId])
  @@index([leagueId])
  @@index([userId])
}